name: Deploy (Simple JAR over SSH)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  SERVER_DIR: /home/ubuntu/BE
  APP_JAR: app.jar

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # JDK & Gradle
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build Boot JAR
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon clean bootJar -x test

      - name: Verify artifact on runner
        run: |
          ls -l build/libs
          ls -t build/libs/*.jar | head -n 1

      # 최신 JAR 하나만 정확히 선택
      - name: Pick latest jar
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          JAR=$(ls -t build/libs/*.jar | head -n 1)
          echo "jar=$JAR" >> "$GITHUB_OUTPUT"
          echo "Picked: $JAR"

      # 서버 준비: 디렉토리 보장 + .env 생성(APP_ENV 시크릿 → .env)
      - name: Prepare server & write .env
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
          APP_ENV: ${{ secrets.APP_ENV }}   # 멀티라인 .env 전체 내용
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR,APP_ENV
          script: |
            set -euo pipefail
            sudo mkdir -p "$SERVER_DIR/upload"
            sudo chown -R "${USER}:${USER}" "$SERVER_DIR"
            sudo chmod 755 /home/ubuntu /home/ubuntu/BE

            # .env 갱신(있으면 유지, 시크릿이 넘어오면 덮어씀), CRLF 제거
            if [ -n "${APP_ENV:-}" ]; then
              printf "%s\n" "$APP_ENV" > "$SERVER_DIR/.env.tmp"
              tr -d '\r' < "$SERVER_DIR/.env.tmp" > "$SERVER_DIR/.env"
              rm -f "$SERVER_DIR/.env.tmp"
              chmod 600 "$SERVER_DIR/.env"
            elif [ ! -f "$SERVER_DIR/.env" ]; then
              echo "SPRING_PROFILES_ACTIVE=dev" > "$SERVER_DIR/.env"
              chmod 600 "$SERVER_DIR/.env"
            else
              tr -d '\r' < "$SERVER_DIR/.env" > "$SERVER_DIR/.env.tmp" && mv "$SERVER_DIR/.env.tmp" "$SERVER_DIR/.env"
              chmod 600 "$SERVER_DIR/.env"
            fi

            ls -ld "$SERVER_DIR" "$SERVER_DIR/upload"

      # JAR 업로드 (단일 파일, strip_components 제거)
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "${{ steps.pick.outputs.jar }}"
          target: "${{ env.SERVER_DIR }}/upload"
          overwrite: true

      # 업로드 확인
      - name: Verify upload on EC2
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR
          script: |
            set -euo pipefail
            ls -lt "$SERVER_DIR/upload" | head -n 5
            ls -t "$SERVER_DIR"/upload/*.jar | head -n 1

      # 배치 + 재기동 — systemd (실패 시 액션도 실패)
      - name: Restart app on EC2 (systemd, strong checks)
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
          APP_JAR: ${{ env.APP_JAR }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR,APP_JAR
          script: |
            set -euo pipefail

            echo "[pick] latest uploaded jar"
            JAR=$(ls -t "$SERVER_DIR"/upload/*.jar | head -n 1)
            [ -n "$JAR" ] || { echo "No JAR found in $SERVER_DIR/upload"; exit 1; }
            echo "latest jar: $JAR"

            echo "[stop rogue] kill any orphaned app.jar"
            sudo systemctl stop myapp || true
            pkill -f "$SERVER_DIR/$APP_JAR" 2>/dev/null || true
            pkill -f "/home/ubuntu/BE/app.jar" 2>/dev/null || true

            echo "[backup] keep previous jar"
            if [ -f "$SERVER_DIR/$APP_JAR" ]; then
              cp -f "$SERVER_DIR/$APP_JAR" "$SERVER_DIR/$APP_JAR.bak" || true
            fi

            echo "[deploy] move jar -> $SERVER_DIR/$APP_JAR"
            mv -f "$JAR" "$SERVER_DIR/$APP_JAR"
            chmod +x "$SERVER_DIR/$APP_JAR"

            echo "[hash] verify deployed jar matches uploaded one"
            DEPLOY_SHA=$(sha256sum "$SERVER_DIR/$APP_JAR" | awk '{print $1}')
            echo "DEPLOY_SHA=$DEPLOY_SHA"

            echo "[env] ensure .env is unix-safe"
            cd "$SERVER_DIR"
            tr -d '\r' < .env > .env.tmp && mv .env.tmp .env
            chmod 600 .env

            echo "[restart] systemctl restart myapp"
            sudo systemctl daemon-reload
            sudo systemctl restart myapp

            echo "[assert] service must be active"
            sudo systemctl is-active --quiet myapp || { 
              echo "[ERROR] myapp inactive"; 
              sudo journalctl -u myapp -n 300 --no-pager; 
              exit 1; 
            }

            echo "[postcheck] recent logs"
            sudo journalctl -u myapp -n 120 --no-pager || true

            echo "Deployed ✅ (service active)"
