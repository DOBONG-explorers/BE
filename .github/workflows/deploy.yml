name: Deploy (Rolling / Swarm)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag (e.g., dev-2025-10-08-8)"
        required: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/dobongzip-api
  REMOTE_DIR: /opt/dobongzip

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # JDK & Gradle
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build Boot JAR (with retries & verbose)
        run: |
          set -e
          chmod +x ./gradlew
          for i in 1 2 3; do
            ./gradlew --no-daemon --info --stacktrace clean bootJar -x test && break || {
              echo "Gradle failed on attempt $i, retrying in 15s..."
              sleep 15
            }
          done
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx2g"

      # Docker build & push
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # deploy/ 디렉터리 동기화
      - name: Ship deploy/ directory
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "deploy/**"
          target: "${{ env.REMOTE_DIR }}"
          strip_components: 0

      # ENV(멀티라인) 시크릿으로 서버에 .env 생성 (+ CRLF 제거)
      - name: Write .env from ENV secret
        uses: appleboy/ssh-action@v1.0.3
        env:
          ENV_FILE: ${{ secrets.ENV }}                      # 멀티라인 .env 원문
          SPRO: ${{ secrets.SPRING_PROFILES_ACTIVE }}       # 예: dev
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: ENV_FILE,SPRO
          script: |
            set -e
            cd "${{ env.REMOTE_DIR }}"
            umask 177
            printf '%s' "$ENV_FILE" > .env
            printf '\nSPRING_PROFILES_ACTIVE=%s\n' "$SPRO" >> .env
            # 윈도 개행 제거
            sed -i 's/\r$//' .env
            chmod 600 .env
            echo ".env written at $(pwd)/.env"

      # 롤링 업데이트 (Swarm)
      - name: Rolling update with Docker Swarm
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e

            # 0) Docker Hub 로그인 (root 권한 + CR 제거)
            sudo docker logout || true
            sudo rm -f /root/.docker/config.json || true
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | tr -d '\r' | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 1) Swarm 보증 (이미 초기화되어 있으면 통과)
            sudo docker swarm init || true

            # 2) 배포 디렉터리
            cd "${{ env.REMOTE_DIR }}/deploy"

            # 3) root 쉘에서 .env 를 '줄단위 export' 로 안전 로드 후 배포
            sudo -E bash -c '
              set -e

              # (선택) .env 윈도 개행 제거
              sed -i "s/\r$//" ../.env || true

              # .env: 빈줄/주석 제외, 줄단위 export (특수문자 안전; & 등)
              while IFS= read -r line; do
                [ -z "$line" ] && continue
                case "$line" in \#*) continue ;; esac
                export "$line"
              done < ../.env

              # 배포 변수 (레포/태그)
              export IMAGE_NAME="${{ env.IMAGE_NAME }}"          
              export TAG="${{ github.event.inputs.image_tag }}"  # ex) dev-2025-10-08-8

              # (디버그) 반드시 값이 들어왔는지 한 줄 점검 (로그에 길이만 남김)
              if [ -n "$DEV_DB_URL" ]; then
                echo "DEV_DB_URL present (length=${#DEV_DB_URL})"
              else
                echo "DEV_DB_URL is EMPTY" >&2
              fi

              docker stack deploy -c stack.yml dobong --with-registry-auth
              docker service ls
              docker service ps dobong_api --no-trunc
            '
