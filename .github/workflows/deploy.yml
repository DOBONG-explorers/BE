name: Deploy (Simple JAR over SSH)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  SERVER_DIR: /home/ubuntu/BE
  APP_JAR: app.jar

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # JDK & Gradle
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build Boot JAR
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon clean bootJar -x test

      # ‚úÖ ÏïÑÌã∞Ìå©Ìä∏ ÌôïÏù∏ (Îü∞ÎÑàÏóêÏÑú jarÍ∞Ä Ïã§Ï†úÎ°ú ÏûàÎäîÏßÄ)
      - name: Verify artifact on runner
        run: |
          echo "== build/libs listing =="
          ls -l build/libs || true
          echo "== pick one jar =="
          JAR=$(ls -t build/libs/*.jar | head -n 1)
          echo "Picked: $JAR"
          test -f "$JAR"

      # üîπ ÏÇ¨Ï†Ñ Ï§ÄÎπÑ: ÎîîÎ†âÌÑ∞Î¶¨/Í∂åÌïú Î≥¥Ïû•
      - name: Prepare directories on EC2
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR
          script: |
            set -euxo pipefail
            sudo mkdir -p "$SERVER_DIR/upload"
            sudo chown -R "${USER}:${USER}" "$SERVER_DIR"
            sudo chmod 755 /home/ubuntu /home/ubuntu/BE
            ls -ld /home/ubuntu /home/ubuntu/BE /home/ubuntu/BE/upload

      # üîπ JAR ÏóÖÎ°úÎìú (Í≤ΩÎ°úÎ•º ÌôïÏã§Ìûà ÏßÄÏ†ï + ÎîîÎ≤ÑÍ∑∏ ÏºúÍ∏∞)
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "build/libs/*.jar"         # ‚Üê env ÎåÄÏã† ÌôïÏã§Ìïú Í∏ÄÎ°≠ ÏÇ¨Ïö©
          target: "${{ env.SERVER_DIR }}/upload"
          overwrite: true
          debug: true                        # ‚Üê Î¨∏Ï†ú Ïãú ÏõêÏù∏ Ï∂úÎ†•

      # ‚úÖ ÏóÖÎ°úÎìú Í≤ÄÏ¶ù: ÏõêÍ≤©ÏóêÏÑú ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
      - name: Verify upload on EC2
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR
          script: |
            set -euxo pipefail
            echo "== remote upload dir listing =="
            ls -l "$SERVER_DIR/upload"
            echo "== latest jar =="
            ls -t "$SERVER_DIR"/upload/*.jar | head -n 1

      # üîπ Î∞∞Ïπò + Ïû¨Í∏∞Îèô (nohup)
      - name: Restart app on EC2 (nohup)
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
          APP_JAR: ${{ env.APP_JAR }}
          SPRING_PROFILES_ACTIVE: ${{ secrets.SPRING_PROFILES_ACTIVE }} # dev/prod
          JAVA_OPTS: "-Xms256m -Xmx512m"
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR,APP_JAR,SPRING_PROFILES_ACTIVE,JAVA_OPTS
          script: |
            set -euo pipefail

            echo "[pick] latest jar"
            JAR=$(ls -t "$SERVER_DIR"/upload/*.jar | head -n 1 || true)
            if [ -z "${JAR:-}" ]; then
              echo "No JAR found in $SERVER_DIR/upload"; exit 1
            fi
            echo "latest jar: $JAR"

            echo "[stop] kill old process if running"
            pkill -f "$SERVER_DIR/$APP_JAR" || true
            sleep 2

            echo "[deploy] move jar to $SERVER_DIR/$APP_JAR"
            mv -f "$JAR" "$SERVER_DIR/$APP_JAR"
            chmod +x "$SERVER_DIR/$APP_JAR"

            echo "[start] nohup spring (profile=$SPRING_PROFILES_ACTIVE)"
            cd "$SERVER_DIR"
            nohup java $JAVA_OPTS -jar -Dspring.profiles.active="$SPRING_PROFILES_ACTIVE" "$APP_JAR" > app.log 2>&1 &

            echo "[health] wait & probe actuator"
            for i in {1..10}; do
              if curl -fsS http://127.0.0.1:8080/actuator/health >/dev/null; then
                echo "Deployed & healthy ‚úÖ"
                exit 0
              fi
              echo "waiting... ($i/10)"; sleep 3
            done

            echo "Health check failed ‚ùå (tail app.log)"
            tail -n 200 app.log || true
            exit 1
