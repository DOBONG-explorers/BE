name: Deploy (Simple JAR over SSH)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  SERVER_DIR: /home/ubuntu/BE
  APP_JAR: app.jar

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # JDK & Gradle
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build Boot JAR
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon clean bootJar -x test

      - name: Verify artifact on runner
        run: |
          ls -l build/libs
          ls -t build/libs/*.jar | head -n 1

      # 서버 준비: 디렉토리 보장 + .env 생성(APP_ENV 시크릿 -> .env)
      - name: Prepare server & write .env
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
          APP_ENV: ${{ secrets.APP_ENV }}   # ✅ 멀티라인 .env 내용
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}   # ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR,APP_ENV
          script: |
            set -euo pipefail
            sudo mkdir -p "$SERVER_DIR/upload"
            sudo chown -R "${USER}:${USER}" "$SERVER_DIR"
            sudo chmod 755 /home/ubuntu /home/ubuntu/BE

            if [ -n "${APP_ENV:-}" ]; then
              printf "%s\n" "$APP_ENV" > "$SERVER_DIR/.env.tmp"
              tr -d '\r' < "$SERVER_DIR/.env.tmp" > "$SERVER_DIR/.env"
              rm -f "$SERVER_DIR/.env.tmp"
              chmod 600 "$SERVER_DIR/.env"
            fi
            ls -ld "$SERVER_DIR" "$SERVER_DIR/upload"

      # JAR 업로드
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "build/libs/*.jar"
          target: "${{ env.SERVER_DIR }}/upload"
          overwrite: true
          strip_components: 2

      - name: Verify upload on EC2
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR
        script: |
          set -euo pipefail
          ls -l "$SERVER_DIR/upload"
          ls -t "$SERVER_DIR"/upload/*.jar | head -n 1

      # 배치 + 재기동 — systemd 관리 (nohup 제거)
      - name: Restart app on EC2 (systemd)
        uses: appleboy/ssh-action@v1.2.0
        env:
          SERVER_DIR: ${{ env.SERVER_DIR }}
          APP_JAR: ${{ env.APP_JAR }}
          SPRING_PROFILES_ACTIVE: ${{ secrets.SPRING_PROFILES_ACTIVE }} # dev/prod
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: SERVER_DIR,APP_JAR,SPRING_PROFILES_ACTIVE
          script: |
            set -euo pipefail

            echo "[pick] latest jar"
            JAR=$(ls -t "$SERVER_DIR"/upload/*.jar | head -n 1 || true)
            if [ -z "${JAR:-}" ]; then
              echo "No JAR found in $SERVER_DIR/upload"; exit 1
            fi
            echo "latest jar: $JAR"

            echo "[backup] keep previous jar"
            if [ -f "$SERVER_DIR/$APP_JAR" ]; then
              cp -f "$SERVER_DIR/$APP_JAR" "$SERVER_DIR/$APP_JAR.bak" || true
            fi

            echo "[deploy] move jar -> $SERVER_DIR/$APP_JAR"
            mv -f "$JAR" "$SERVER_DIR/$APP_JAR"
            chmod +x "$SERVER_DIR/$APP_JAR"

            echo "[env] ensure .env exists (CRLF stripped)"
            cd "$SERVER_DIR"
            [ -f ".env" ] || { echo "SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}" > .env; }
            tr -d '\r' < .env > .env.tmp && mv .env.tmp .env
            chmod 600 .env

            echo "[restart] systemctl restart myapp"
            sudo systemctl daemon-reload
            sudo systemctl restart myapp

            echo "[health] wait & probe actuator"
            for i in {1..20}; do
              if curl -fsS http://127.0.0.1:8080/actuator/health >/dev/null; then
                echo "Deployed & healthy ✅"
                exit 0
              fi
              echo "waiting... ($i/20)"; sleep 3
            done

            echo "Health check failed ❌ — recent logs:"
            sudo journalctl -u myapp -n 200 --no-pager || true
            if [ -f "$SERVER_DIR/$APP_JAR.bak" ]; then
              echo "[rollback] restore previous jar"
              mv -f "$SERVER_DIR/$APP_JAR.bak" "$SERVER_DIR/$APP_JAR"
              sudo systemctl restart myapp
            fi
            exit 1
