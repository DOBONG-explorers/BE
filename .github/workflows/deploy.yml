name: Deploy (Simple JAR over SSH)

on:
  push:
    branches: [ main ]          # main push 시 자동 실행
  workflow_dispatch: {}         # 수동 실행도 가능

env:
  SERVER_DIR: /home/ubuntu/BE   # EC2의 프로젝트 디렉터리
  APP_JAR: app.jar              # 서버에서 사용할 파일명(고정)

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # JDK & Gradle
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build Boot JAR
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon clean bootJar -x test
          echo "JAR_PATH=$(ls -1 build/libs/*.jar | head -n 1)" >> $GITHUB_ENV

      # --- EC2에 JAR 복사
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "${{ env.JAR_PATH }}"
          target: "${{ env.SERVER_DIR }}/${{ env.APP_JAR }}"
          overwrite: true

      # --- 서버에서 기존 앱 중지 & 새 JAR로 재기동(nohup)
      - name: Restart app on EC2 (nohup)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e
            mkdir -p "${{ env.SERVER_DIR }}"
            cd "${{ env.SERVER_DIR }}"

            echo "[stop] kill old process if running"
            pkill -f "/home/ubuntu/BE/${{ env.APP_JAR }}" || true
            sleep 2

            echo "[start] nohup with profile from env"
            nohup java -jar -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE} "${{ env.APP_JAR }}" > app.log 2>&1 &

            echo "[check] wait & probe health"
            # 부팅 여유
            for i in 1 2 3 4 5; do
              if curl -fsS http://127.0.0.1:8080/actuator/health >/dev/null; then
                echo "Deployed & healthy ✅"; exit 0
              fi
              echo "waiting... ($i/5)"; sleep 3
            done
            echo "Health check failed"
            tail -n 200 app.log
            exit 1
